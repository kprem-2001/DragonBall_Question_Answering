import pickle
import os
import sys
from pathlib import Path

from src.exceptions import CustomException
from src.logger import logging

def save_object(object, save_path: str):
    '''
    Save an object to a file in binary mode.
    
    Params:
        object: The object to save.
        save_path: The file path where the object will be saved.
    
    Raises:
        CustomException if any error occurs during saving.
    '''
    try:
        # Ensure the directory exists
        dir_path = os.path.dirname(save_path)
        os.makedirs(dir_path, exist_ok=True)
        
        # Open the file in write-binary mode ('wb')
        with open(save_path, 'wb') as save_file:
            pickle.dump(object, save_file)
            
    except Exception as e:
        logging.exception(f"Error while saving object to {save_path}: {e}")
        raise CustomException(e, sys)


def load_object(load_path: str):
    '''
    Load an object from a file in binary mode.
    
    Params:
        load_path: The file path from where the object will be loaded.
    
    Returns:
        The object loaded from the file.
    
    Raises:
        CustomException if any error occurs during loading.
    '''
    try:
        # Use Path() to handle the correct path type automatically
        load_path = Path(load_path)
        
        # Check if file exists
        if not load_path.exists():
            raise FileNotFoundError(f"File {load_path} does not exist.")

        # Open the file in read-binary mode ('rb')
        with open(load_path, 'rb') as f:
            return pickle.load(f)
    except Exception as e:
        logging.exception(f"Error while loading object from {load_path}: {e}")
        raise CustomException(e, sys)


def check_model_exist(save_path: str):
    '''
    Check if the model exists at the specified path.
    
    Params:
        save_path: The file path to check.
    
    Returns:
        True if the file exists, False otherwise.
    
    Raises:
        CustomException if any error occurs during checking.
    '''
    try:
        return os.path.isfile(save_path)
    except Exception as e:
        logging.exception(f"Error while checking if model exists at {save_path}: {e}")
        raise CustomException(e, sys)


def reformat_prediction(prediction: dict) -> dict:
    '''
    Reformat the prediction dictionary by removing unwanted values and converting types.
    
    Params:
        prediction: The prediction dictionary generated by the prediction pipeline.
    
    Returns:
        A reformatted prediction dictionary.
    
    Raises:
        CustomException if any error occurs during reformatting.
    '''
    try:
        formatted_prediction = dict()
        formatted_prediction['query'] = prediction['query']
        formatted_prediction['answers'] = []
        
        # Reformat the answers part of the prediction
        for answer_obj in prediction['answers']:
            answer_obj = answer_obj.to_dict()  # Assuming answer_obj has a to_dict() method
            
            formatted_prediction['answers'].append(
                {
                    'answer': answer_obj['answer'],
                    'context': answer_obj['context']
                }
            )
        
        return formatted_prediction
    except Exception as e:
        logging.exception(f"Error while reformatting prediction: {e}")
        raise CustomException(e, sys)
